<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Flood warning</title>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/jquery.knob/1.2.13/jquery.knob.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
  <style>
    .dial-container {
      display: inline-block;
      margin-right: 25px;
      margin-bottom: 25px;
    }
  </style>
</head>

<body>
  {{> menu}}
  <div class="container">
    <h1 class="text-center my-5">HỆ THỐNG CẢNH BÁO LŨ</h1>
    <div class="row justify-content-center">
      <div class="col-3">
        <canvas id="distanceChart"></canvas>
      </div>
      <div class="col-3">
        <div class="dial-container">
          <input id="distance" type="text" class="dial" data-min="0" data-max="200" data-width="200" data-height="200"
            data-thickness=".2" data-fgColor="#66CC66" data-displayPrevious=true readonly>
          <p class="text-center"><label>Khoảng cách (cm)</label></p>
        </div>
      </div>
      <div class="col-3">
        <div class="dial-container">
          <input id="average" type="text" class="dial" data-min="0" data-max="200" data-width="200" data-height="200"
            data-thickness=".2" data-fgColor="#FF6699" data-displayPrevious=true readonly>
          <p class="text-center"><label>Trung bình</label></p>
        </div>
      </div>
      <div class="col-3">
        <canvas id="averageChart"></canvas>
      </div>
    </div>
    <div class="row justify-content-center">
      <div class="col-3">
        <canvas id="temperatureChart"></canvas>
      </div>
      <div class="col-3">
        <div class="dial-container">
          <input id="temperature" type="text" class="dial" data-min="0" data-max="100" data-width="200"
            data-height="200" data-thickness=".2" data-fgColor="#FFCC33" data-displayPrevious=true readonly>
          <p class="text-center"><label>Nhiệt độ (°C)</label></p>
        </div>
      </div>
      <div class="col-3">
        <div class="dial-container">
          <input id="humidity" type="text" class="dial" data-min="0" data-max="100" data-width="200" data-height="200"
            data-thickness=".2" data-fgColor="#3399FF" data-displayPrevious=true readonly>
          <p class="text-center"><label>Độ ẩm (%)</label></p>
        </div>
      </div>
      <div class="col-3">
        <canvas id="humidityChart"></canvas>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <h2 class="text-center">Warning: <span id="warning"></span></h2>
      </div>
    </div>
    <div class="row">



    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    $(function () {
      $(".dial").knob({
        'readOnly': true // Set readOnly option to true
      });
    });
    const socket = io();
    socket.on('data', (data) => {
      $('#distance').val(data.distance).trigger('change');
      $('#temperature').val(data.temperature).trigger('change');
      $('#humidity').val(data.humidity).trigger('change');
      $('#average').val(data.average).trigger('change');
      $('#warning').text(data.warning);
    });
    // Add a click event listener to the reset button that sends a message to the server to reset the data
    $('#reset-button').on('click', () => {
      socket.emit('reset');
    });
 const distanceChartCtx = document.getElementById('distanceChart').getContext('2d');
const averageChartCtx = document.getElementById('averageChart').getContext('2d');
const temperatureChartCtx = document.getElementById('temperatureChart').getContext('2d');
const humidityChartCtx = document.getElementById('humidityChart').getContext('2d');

const createChart = (context, label) => {
  return new Chart(context, {
    type: 'line',
    data: {
      labels: [],
      datasets: [
        {
          label: label,
          data: [],
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 2,
          fill: false,
        },
      ],
    },
    options: {
      scales: {
        x: { display: true },
        y: { display: true },
      },
    },
  });
};

const distanceChart = createChart(distanceChartCtx, 'Khoảng cách');
const averageChart = createChart(averageChartCtx, 'Trung bình');
const temperatureChart = createChart(temperatureChartCtx, 'Nhiệt độ');
const humidityChart = createChart(humidityChartCtx, 'Độ ẩm');

const updateCharts = (latestValues) => {
  distanceChart.data.labels = latestValues.map((_, i) => i + 1);
  distanceChart.data.datasets[0].data = latestValues.map((v) => v.distance);
  distanceChart.update();

  averageChart.data.labels = latestValues.map((_, i) => i + 1);
  averageChart.data.datasets[0].data = latestValues.map((v) => v.average);
  averageChart.update();

  temperatureChart.data.labels = latestValues.map((_, i) => i + 1);
  temperatureChart.data.datasets[0].data = latestValues.map((v) => v.temperature);
  temperatureChart.update();

  humidityChart.data.labels = latestValues.map((_, i) => i + 1);
  humidityChart.data.datasets[0].data = latestValues.map((v) => v.humidity);
  humidityChart.update();
};

const latestValues = JSON.parse(localStorage.getItem('latestValues')) || [];
updateCharts(latestValues);

// Listen for data updates
io.on('data', (data) => {
  latestValues.push(data);
  if (latestValues.length > 10) {
    latestValues.shift();
  }
  localStorage.setItem('latestValues', JSON.stringify(latestValues));
  updateCharts(latestValues);
});
  </script>
</body>

</html>